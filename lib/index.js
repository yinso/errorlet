// Generated by CoffeeScript 1.10.0
(function() {
  var AppError,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AppError = (function(superClass) {
    extend(AppError, superClass);

    AppError.isa = function(obj) {
      return obj instanceof this;
    };

    AppError.raiseAsync = function(params, cb) {
      var err;
      if (params == null) {
        params = {};
      }
      err = this.create(params, this.async);
      return cb(err);
    };

    AppError.raise = function(params, context) {
      var err;
      if (params == null) {
        params = {};
      }
      if (context == null) {
        context = AppError.raise;
      }
      err = this.create(params, context);
      throw err;
    };

    AppError.create = function(params, context) {
      if (params == null) {
        params = {};
      }
      if (context == null) {
        context = AppError.create;
      }
      return new this(params, context);
    };

    function AppError(params, context) {
      if (params == null) {
        params = {};
      }
      if (context == null) {
        context = AppError;
      }
      AppError.__super__.constructor.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, context);
      }
      this.parameters = params;
      if (params.hasOwnProperty('error')) {
        this.name = params.error;
      } else {
        this.name = 'AppError';
      }
      if (params.hasOwnProperty('message')) {
        this._message = params.message;
      }
      this.message = this.format();
      this.traces = [];
    }

    AppError.prototype.inspect = function() {
      return this.toString();
    };

    AppError.prototype.format = function() {
      if (this._message) {
        return this._message + ": " + (JSON.stringify(this.parameters));
      } else {
        return JSON.stringify(this.parameters);
      }
    };

    return AppError;

  })(Error);

  module.exports = AppError;

}).call(this);
